version: '3.9'
services:
    redis:
        image: redis
        restart: always
        ports:
          - '6379:6379'
        container_name: redis-cache
        networks:
          - celery-network


    rabbitmq:
        image: rabbitmq:3-management-alpine
        container_name: "some-rabbit"
        hostname: "my-rabbit"
        ports:
          - 5672:5672
          - 15672:15672
        # volumes:
        #     - rabbitmq_data:/var/lib/rabbitmq/
        #     - rabbitmq_log:/var/log/rabbitmq
        networks:
          - celery-network

    # fastapi_app:
    #     build:
    #         context: ./fastapi_app
    #         dockerfile: Dockerfile
    #     container_name: "fastapi_app"
    #     # hostname: "fastapi_app"
    #     ports:
    #       - 8080:8080
    #     networks:
    #       - celery-network
    #     depends_on:
    #         - celery_worker

    celery_worker_1:
        # build:
        #     context: ./celery_worker
        #     dockerfile: Dockerfile
        image: celery_celery_worker:latest
        container_name: "celery_worker_1"
        command: ["celery", "-A", "tasks", "worker", "--hostname", "worker_1@%h",  "-l", "INFO"]
        volumes:
          - ./celery_worker/tasks.py:/celery_worker/tasks.py
          - ./celery_worker/celeryconfig.py:/celery_worker/celeryconfig.py
        networks:
          - celery-network
        depends_on:
          - rabbitmq
          - redis
        # tty: true
        user: app
        # stdin_open: true

    celery_worker_2:
        # build:
        #     context: ./celery_worker
        #     dockerfile: Dockerfile
        image: celery_celery_worker:latest
        container_name: "celery_worker_2"
        command: ["celery", "-A", "tasks", "worker", "--hostname", "worker_2@%h",  "-l", "INFO"]
        volumes:
          - ./celery_worker/tasks.py:/celery_worker/tasks.py
          - ./celery_worker/celeryconfig.py:/celery_worker/celeryconfig.py
        networks:
          - celery-network
        depends_on:
          - rabbitmq
          - redis
        # tty: true
        user: app
        # stdin_open: true

    celery_worker_3:
        # build:
        #     context: ./celery_worker
        #     dockerfile: Dockerfile
        image: celery_celery_worker:latest
        container_name: "celery_worker_3"
        command: ["celery", "-A", "tasks", "worker", "--hostname", "worker_3@%h",  "-l", "INFO"]
        volumes:
          - ./celery_worker/tasks.py:/celery_worker/tasks.py
          - ./celery_worker/celeryconfig.py:/celery_worker/celeryconfig.py
        networks:
          - celery-network
        depends_on:
          - rabbitmq
          - redis
        # tty: true
        user: app
        # stdin_open: true

    celery_app:
        build:
            context: ./celery_worker
            dockerfile: Dockerfile_app
        container_name: "celery_app"
        volumes:
          - ./celery_worker/tasks.py:/celery_worker/tasks.py
          - ./celery_worker/main.py:/celery_worker/main.py
          - ./celery_worker/celeryconfig.py:/celery_worker/celeryconfig.py
        networks:
          - celery-network
        depends_on:
          - rabbitmq
          - redis
        tty: true
        user: app
        stdin_open: true
        command : bash

    celery_send_task:
        build:
            context: ./send_task
            dockerfile: Dockerfile
        container_name: "celery_send_task"
        volumes:
          - ./send_task/send_task.py:/celery_worker/send_task.py
        networks:
          - celery-network
        depends_on:
          - rabbitmq
          - redis
        tty: true
        user: app
        stdin_open: true
        command : bash

    flower:
      image: mher/flower
      container_name: flower
      command: ["celery", "flower"]
      ports:
        - 5555:5555
      # volumes:
      #   - ~/celery_worker/tasks.py:/tasks.py
      #   - ~/celery/flower_conf/flowerconfig.py:/flowerconfig.py
      environment:
        - FLOWER_OAUTH2_SECRET=${FLOWER_OAUTH2_SECRET:?err}
        - FLOWER_OAUTH2_KEY=${FLOWER_OAUTH2_KEY:?err}
        - FLOWER_OAUTH2_REDIRECT_URI=${FLOWER_OAUTH2_REDIRECT_URI:?err}
        - CELERY_BROKER_URL=${CELERY_BROKER_URL:?err}
        - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:?err}
        - FLOWER_AUTH_PROVIDER=${FLOWER_AUTH_PROVIDER:?err}
      networks:
        - celery-network
      depends_on:
        - rabbitmq
        - redis
        - celery_worker_1
        - celery_worker_2

    prometheus:
      image: prom/prometheus
      container_name: "prometheus"
      volumes:
        - ./prometheus/:/etc/prometheus/
        - prometheus_data:/prometheus
      command:
        - '--config.file=/etc/prometheus/prometheus.yaml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
        - '--web.console.templates=/usr/share/prometheus/consoles'
      ports:
        - 9090:9090
      restart: unless-stopped
      networks:
          - celery-network

    grafana:
      image: grafana/grafana:latest
      container_name: grafana
      ports:
        - "3000:3000"
      volumes:
        - grafana-storage:/var/lib/grafana
      networks:
        - celery-network


volumes:
  prometheus_data:
  grafana-storage:

networks:
  celery-network:
    driver: bridge
